# Example bugwarriorrc
#
# General stuff.
[general]
# Here you define a comma separated list of targets.  Each of them must have a
# section below determining their properties, how to query them, etc. The name
# is just a symbol, and doesn't have any functional importance.
targets = framagit

# If unspecified, the default taskwarrior config will be used.
#taskrc = /path/to/.taskrc

# Setting this to true will shorten links with http://da.gd/
#shorten = False

# Setting this to True will include a link to the ticket in the description
inline_links = False

# Setting this to True will include a link to the ticket as an annotation
annotation_links = True

# Setting this to True will include issue comments and author name in task
# annotations
annotation_comments = True

# Defines whether or not issues should be matched based upon their description.
# In legacy mode, we will attempt to match issues to bugs based upon the
# presence of the '(bw)' marker in the task description. If this is false, we
# will only select issues having the appropriate UDA fields defined (which is
# smarter, better, newer, etc..)
legacy_matching = False

# log.level specifies the verbosity.  The default is DEBUG.
# log.level can be one of DEBUG, INFO, WARNING, ERROR, CRITICAL, DISABLED
log.level = INFO

# If log.file is specified, output will be redirected there. If it remains
# unspecified, output is sent to sys.stderr
# log.file = /var/log/bugwarrior.log

# Configure the default description or annotation length.
annotation_length = 500

# Use maximally this number of characters in the description. Default: 35.
description_length = 500

# If False, bugwarrior won’t bother with adding annotations to your tasks at
# all. Default: True.
merge_annotations = true

# If False, bugwarrior won’t bother with adding tags to your tasks at all.
# Default: True.
merge_tags = true

# A comma separated list of attributes that shouldn’t be updated by bugwarrior.
# Use for values that you want to tune manually. Default: priority.
# static_fields = priority

# Use hooks to run commands prior to importing from bugwarrior-pull.
# bugwarrior-pull will run the commands in the order that they are specified
# below.
# pre_import: The pre_import hook is invoked after all issues have been pulled
# from remote sources, but before they are synced to the TW db. If your
# pre_import script has a non-zero exit code, the `bugwarrior-pull` command will
# exit early.
# [hooks]
# pre_import = /home/someuser/backup.sh, /home/someuser/sometask.sh

# GITLAB - FRAMAGIT.ORG
# ==============================================================================
[framagit]
# Documented configuration
# ------------------------------------------------------------------------------
# Specify the service type
service = gitlab
# Service login
gitlab.login = rdeville
# Service API access token
gitlab.token = @oracle:eval:keepass show framagit -a TOKEN_API
# Service domain name
gitlab.host = framagit.org
# Include issues for specific repos
# gitlab.include_repos =
# Exclude issues for specific repos
gitlab.exclude_repos = rdeville.private/.*
# Include issues for repos defined by regex
gitlab.include_regex = rdeville.public/.*
# Although you can filter issues using Common Service Configuration Options,
# merge requests are not filtered by default. You can filter merge requests by
# adding the following configuration option:
gitlab.filter_merge_requests = true
# By default todo items are not included. You may include them by adding the
# following configuration option:
gitlab.include_todos = false
# If todo items are included, by default, todo items for all projects are
# included. To only fetch todo items for projects which are being fetched, you
# may set:
gitlab.include_all_todos = true
# If you would like to only pull issues and MRs that you’ve authored, you may set:
# gitlab.only_if_author = myusername
# The gitlab issue tracker allows you to attach labels to issues; to use those
# labels as tags, you can use the gitlab.import_labels_as_tags option:
gitlab.import_labels_as_tags = true
# Not documented configuration
# ------------------------------------------------------------------------------
# Use simple API output to reduce data quantity
gitlab.simple = false
# Limit issues to repo where I'm member or repo I owned
gitlab.membership = true
gitlab.owned = true
# Common service configuration options:
# ------------------------------------------------------------------------------
# If set to a username, only import issues assigned to the specified user.
# gitlab.only_if_assigned = false
# If set to True and only_if_assigned is set, then also create tasks for issues
# that are not assigned to anybody. Defaults to False.
gitlab.also_unassigned = true
# Assign this priority (‘L’, ‘M’, or ‘H’) to newly-imported issues.
# Defaults to M.
gitlab.default_priority = M
# A comma-separated list of tags to add to an issue. In most cases, plain
# strings will suffice, but you can also specify templates. See the section
# Field Templates for more information.
gitlab.add_tags = _frama, {{ gitlabtype }}
# Taskwarrior value templates
# ------------------------------------------------------------------------------
# Overwrite description of these issues.
gitlab.description_template = (BW){{ "#" if gitlabtype == "issue" else "!" }}{{ gitlabnumber }} {{ gitlabtitle }}
# Overwrite project of these issues.
gitlab.project_template = {{ gitlabnamespace | replace('/','.') }}.{{ gitlabrepo }}
# Overwrite labels of these issues
gitlab.label_template = {{ label | replace(' ','_') | lower }}

# vim: ft=dosini
